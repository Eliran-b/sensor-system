The project hierarchy:

    - services:
        system micro services

    - common:
        enums, objects, utils, external queues interface and all the logic that is common to the services.

    - tests
        tests of system flow


OOD:
    - CachedInstance: similar to Singleton design, the difference is that the class can create only one object of each type(based on the parameters send to the constructor).
    - AbstractFactory: use to create an different sensor types and use parent abstract methods
    - Observer: use in each sensor to monitor its queue and handle the incoming message

Common:
    The common directory holds all the mutual logic of the system.
    I used pydantic to validate the messages data in order to make the flow be more clean and decrease human mistakes.

Requirements:
    python3.9+
    pydantic==1.10.12

Notes:
    the dlq implementation suppose to demonstrate the queue logic happens behind the scenes.
     to simplify it I did not implemented any retry of the message processing, it's only to test the general behavior expected of the system.

    check out the SystemDesign.pdf file to get a better understanding of the system design.



